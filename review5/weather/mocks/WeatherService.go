// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	weather "github.com/penoplasttt/review/review5/weather"
	mock "github.com/stretchr/testify/mock"
)

// WeatherService is an autogenerated mock type for the WeatherService type
type WeatherService struct {
	mock.Mock
}

// GetWeather provides a mock function with given fields: data
func (_m *WeatherService) GetWeather(data []byte) (weather.Weather, error) {
	ret := _m.Called(data)

	var r0 weather.Weather
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (weather.Weather, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func([]byte) weather.Weather); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(weather.Weather)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewWeatherService interface {
	mock.TestingT
	Cleanup(func())
}

// NewWeatherService creates a new instance of WeatherService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWeatherService(t mockConstructorTestingTNewWeatherService) *WeatherService {
	mock := &WeatherService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
